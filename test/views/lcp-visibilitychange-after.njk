<!--
 Copyright 2020 Google Inc. All Rights Reserved.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->
{% extends 'layout.njk' %}

{% block content %}
  <h1>LCP Test</h1>
  <p>
    <img style="display:none" src="/test/img/square.png" alt="Square">
  </p>
  <p>Text below the image</p>

  <!-- Include a tall element to ensure scrolling is possible. -->
  <div style="height: 100vh"></div>

  <footer>Text below the full-height element.</footer>

  <script type="module">
    import {getLCP} from '/dist/web-vitals.js';

    // Wait until after the first render and then stub a change to hidden.
    // After that, reveal the image and assert it's not counted toward LCP.
    setTimeout(() => {
      Object.defineProperty(document, 'visibilityState', {value: 'hidden'});
      document.dispatchEvent(new Event('visibilitychange'));

      requestAnimationFrame(() => {
        document.querySelector('img').style.display = 'inline-block';

        requestAnimationFrame(() => {
          getLCP((lcp) => {
            // Log for easier manual testing.
            console.log(lcp);

            // Elements can't be serialized, so we convert first.
            lcp = {
              value: lcp.value,
              delta: lcp.delta,
              entries: lcp.entries.map((e) => ({
                element: e.element.nodeName.toLowerCase(),
                size: e.size,
                startTime: e.startTime,
              })),
              isFinal: lcp.isFinal,
            };

            // Test sending the metric to an analytics endpoint.
            navigator.sendBeacon(`/collect`, JSON.stringify({lcp}));
          }, self.__reportAllChanges);
        });
      });
    }, 100);
  </script>
{% endblock %}
